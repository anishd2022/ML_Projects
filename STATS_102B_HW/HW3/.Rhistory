curr_hess <- prev_hess
} else {
curr_hess <- prev_hess + (y_k %*% t(y_k)) / skTyk -
(prev_hess %*% x_k) %*% t(prev_hess %*% x_k) / (as.numeric(t(x_k) %*% prev_hess %*% x_k))
}
# add info to output matrix
mat[i, 1:length(w0)] <- curr_point
# fill out function output given current point
mat[i, length(w0) + 1] <- g(curr_point)
# check for convergence
if (norm(as.matrix(curr_grad)) < 1e-6 || norm(as.matrix(curr_point) - as.matrix(prev_point)) < 1e-6) {
break
}
}
inputs <- mat[ , 1:length(w0)]
outputs <- mat[ , length(w0) + 1]
min_val <- min(outputs)
# check if there are duplicate minimum values
min_indices <- which(outputs == min_val)
num_min_indices <- length(min_indices)
if (num_min_indices > 1) {
# if there are multiple min values, choose the first one
min_index <- inputs[min_indices[1], ]
} else {
# If there is only one unique minimum value, directly extract its index
min_index <- inputs[min_indices, ]
}
result$index <- min_index
result$val <- min_val
# return result
result
}
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 15)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 20)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(5, 2, 5), 10)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 10)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 100)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 50)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 60)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 55)
# g: function R^n -> R
# grad_g: gradient of g, a function \del g: R^n -> R^b
# w0: initial point
# K: number of iterations
bfgs <- function(g, grad_g, w0, K) {
# create initial list object:
result <- list(index = c(), val = c())
# set initial point:
curr_point <- w0
# create initial empty coordinate matrix: (ncol = n+1)
mat <- matrix(0, nrow = K, ncol = length(w0) + 1)
# set initial hessian approximation to be the identity matrix
curr_hess <- diag(length(w0))
# set initial gradient to be the gradient at the current point
curr_grad <- grad_g(curr_point)
# iterate for K iterations or until convergence:
for (i in 1:K) {
prev_point <- curr_point
prev_hess <- curr_hess
prev_grad <- curr_grad
# update the current values...
curr_point <- prev_point - solve(prev_hess, prev_grad)
curr_grad <- grad_g(curr_point)
# introduce x_k and y_k
x_k <- curr_point - prev_point
y_k <- curr_grad - prev_grad
# update the current hessian approximation
skTyk <- as.numeric(t(x_k) %*% y_k)
if (skTyk == 0) {
curr_hess <- prev_hess
} else {
curr_hess <- prev_hess + (y_k %*% t(y_k)) / skTyk -
(prev_hess %*% x_k) %*% t(prev_hess %*% x_k) / (as.numeric(t(x_k) %*% prev_hess %*% x_k))
}
# add info to output matrix
mat[i, 1:length(w0)] <- curr_point
# fill out function output given current point
mat[i, length(w0) + 1] <- g(curr_point)
# check for convergence
if (norm(as.matrix(curr_grad)) < 1e-6 || norm(as.matrix(curr_point) - as.matrix(prev_point)) < 1e-6) {
break
}
}
# Remove extra rows from mat (if convergence happened before K iterations)
mat <- mat[1:i, ]
inputs <- mat[ , 1:length(w0)]
outputs <- mat[ , length(w0) + 1]
min_val <- min(outputs)
# check if there are duplicate minimum values
min_indices <- which(outputs == min_val)
num_min_indices <- length(min_indices)
if (num_min_indices > 1) {
# if there are multiple min values, choose the first one
min_index <- inputs[min_indices[1], ]
} else {
# If there is only one unique minimum value, directly extract its index
min_index <- inputs[min_indices, ]
}
result$index <- min_index
result$val <- min_val
# return result
result
}
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 55)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 70)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 100)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 100)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 10)
# g: function R^n -> R
# grad_g: gradient of g, a function \del g: R^n -> R^b
# w0: initial point
# K: number of iterations
bfgs <- function(g, grad_g, w0, K) {
# create initial list object:
result <- list(index = c(), val = c())
# set initial point:
curr_point <- w0
# create initial empty coordinate matrix: (ncol = n+1)
mat <- matrix(0, nrow = K, ncol = length(w0) + 1)
# set initial hessian approximation to be the identity matrix
curr_hess <- diag(length(w0))
# set initial gradient to be the gradient at the current point
curr_grad <- grad_g(curr_point)
# iterate for K iterations or until convergence:
for (i in 1:K) {
prev_point <- curr_point
prev_hess <- curr_hess
prev_grad <- curr_grad
# update the current values...
curr_point <- prev_point - solve(prev_hess, prev_grad)
curr_grad <- grad_g(curr_point)
# introduce x_k and y_k
x_k <- curr_point - prev_point
y_k <- curr_grad - prev_grad
# update the current hessian approximation
skTyk <- as.numeric(t(x_k) %*% y_k)
if (skTyk == 0) {
curr_hess <- prev_hess
} else {
curr_hess <- prev_hess + (y_k %*% t(y_k)) / skTyk -
(prev_hess %*% x_k) %*% t(prev_hess %*% x_k) / (as.numeric(t(x_k) %*% prev_hess %*% x_k))
}
# add info to output matrix
mat[i, 1:length(w0)] <- curr_point
# fill out function output given current point
mat[i, length(w0) + 1] <- g(curr_point)
# check for convergence
if (norm(as.matrix(curr_grad)) < 1e-6 || norm(as.matrix(curr_point) - as.matrix(prev_point)) < 1e-6) {
print(i)
break
}
}
# Remove extra rows from mat (if convergence happened before K iterations)
mat <- mat[1:i, ]
inputs <- mat[ , 1:length(w0)]
outputs <- mat[ , length(w0) + 1]
min_val <- min(outputs)
# check if there are duplicate minimum values
min_indices <- which(outputs == min_val)
num_min_indices <- length(min_indices)
if (num_min_indices > 1) {
# if there are multiple min values, choose the first one
min_index <- inputs[min_indices[1], ]
} else {
# If there is only one unique minimum value, directly extract its index
min_index <- inputs[min_indices, ]
}
result$index <- min_index
result$val <- min_val
# return result
result
}
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 100)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 10)
# g: function R^n -> R
# grad_g: gradient of g, a function \del g: R^n -> R^b
# w0: initial point
# K: number of iterations
bfgs <- function(g, grad_g, w0, K) {
# create initial list object:
result <- list(index = c(), val = c())
# set initial point:
curr_point <- w0
# create initial empty coordinate matrix: (ncol = n+1)
mat <- matrix(0, nrow = K, ncol = length(w0) + 1)
# set initial hessian approximation to be the identity matrix
curr_hess <- diag(length(w0))
# set initial gradient to be the gradient at the current point
curr_grad <- grad_g(curr_point)
# iterate for K iterations or until convergence:
for (i in 1:K) {
prev_point <- curr_point
prev_hess <- curr_hess
prev_grad <- curr_grad
# update the current values...
curr_point <- prev_point - solve(prev_hess, prev_grad)
curr_grad <- grad_g(curr_point)
# introduce x_k and y_k
x_k <- curr_point - prev_point
y_k <- curr_grad - prev_grad
# update the current hessian approximation
skTyk <- as.numeric(t(x_k) %*% y_k)
if (skTyk == 0) {
curr_hess <- prev_hess
} else {
curr_hess <- prev_hess + (y_k %*% t(y_k)) / skTyk -
(prev_hess %*% x_k) %*% t(prev_hess %*% x_k) / (as.numeric(t(x_k) %*% prev_hess %*% x_k))
}
# add info to output matrix
mat[i, 1:length(w0)] <- curr_point
# fill out function output given current point
mat[i, length(w0) + 1] <- g(curr_point)
# check for convergence
if (norm(as.matrix(curr_grad)) < 1e-6 || norm(as.matrix(curr_point) - as.matrix(prev_point)) < 1e-6) {
if (i > 2) {
break
}
}
}
# Remove extra rows from mat (if convergence happened before K iterations)
mat <- mat[1:i, ]
inputs <- mat[ , 1:length(w0)]
outputs <- mat[ , length(w0) + 1]
min_val <- min(outputs)
# check if there are duplicate minimum values
min_indices <- which(outputs == min_val)
num_min_indices <- length(min_indices)
if (num_min_indices > 1) {
# if there are multiple min values, choose the first one
min_index <- inputs[min_indices[1], ]
} else {
# If there is only one unique minimum value, directly extract its index
min_index <- inputs[min_indices, ]
}
result$index <- min_index
result$val <- min_val
# return result
result
}
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 100)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 10)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 100)
optim(par = c(5, 5), fn = g, method = "BFGS")
optim(par = c(0.5, 0.16667, -0.3333), fn = f, method = "BFGS")
optim(par = c(5, 5, 5), fn = f, method = "BFGS")
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 10)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) + (1/3), x[3] + (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 50)
optim(par = c(5, 5, 5), fn = f, method = "BFGS")
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) - (1/3), x[3] - (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 50)
f <- function(x) {
((1/2)*(x[1]^2 + x[2]^2 + x[3]^2)) - ((1/2)*(x[1] + x[2]) + (1/3)*(x[2] + x[3]))
}
grad_f <- function(x) {
c(x[1] - (1/2), x[2] - (1/2) - (1/3), x[3] - (1/3))
}
bfgs(f, grad_f, c(50, 20, 54), 20)
optim(par = c(5, 5, 5), fn = f, method = "BFGS")
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(-250, 28), 50)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(250, 28), 50)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(50, 28), 50)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(0, 28), 50)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(0, 28), 500)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(-5, 0), 500)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(5, 12), 500)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(20, 12), 500)
g <- function(w) {
(1 - w[1])^2 + 100*(w[2] - w[1]^2)^2
}
grad_g <- function(w) {
c(-2*(1-w[1]) + 200*(w[2]-w[1]^2)*(-2*w[1]), 200*(w[2] - w[1]^2))
}
# try different values of K and different starting points
bfgs(g, grad_g, c(2, 5), 10)
bfgs(g, grad_g, c(2, 5), 100)
bfgs(g, grad_g, c(1, 1), 10)
bfgs(g, grad_g, c(20, 12), 5)
