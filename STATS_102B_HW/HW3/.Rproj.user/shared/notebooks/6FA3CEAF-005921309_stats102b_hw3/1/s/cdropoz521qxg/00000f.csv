"0","# g is a function: R^n -> R"
"0","# grad_g is the gradient of g: a function \del g: R^n -> R^n"
"0","# hess_g is the hessian of g: a function \del g: R^n -> R^(nxn)"
"0","# w0 is the initial point"
"0","# K is the number of iterations"
"0","newts_method <- function(g, grad_g, hess_g, w0, K) {"
"0","  # create initial list object:"
"0","  result <- list(index = c(), val = c())"
"0","  "
"0","  # set initial point:"
"0","  curr_point <- w0"
"0","  # create initial empty coordinate matrix: (ncol = n+1)"
"0","  mat <- matrix(nrow = K, ncol = length(w0) + 1)"
"0","  "
"0","  # iterate for K iterations:"
"0","  for (i in 1:K) {"
"0","    # calculate gradient at current step:"
"0","    grad_curr <- grad_g(curr_point)"
"0","    # calculate hessian at current step:"
"0","    hess_curr <- hess_g(curr_point)"
"0","    # calculate inverse of the hessian:"
"0","    inv_hess <- solve(hess_curr)"
"0","    # update step..."
"0","    mat[i, 1:length(w0)] <- curr_point - inv_hess %*% grad_curr"
"0","    curr_point <- mat[i, 1:length(w0)]"
"0","    # fill out function output given current point"
"0","    mat[i, length(w0) + 1] <- g(curr_point)"
"0","  }"
"0",""
"0","  inputs <- mat[ , 1:length(w0)]"
"0","  outputs <- mat[ , length(w0) + 1]"
"0","  min_val <- min(outputs)"
"0","  # check if there are duplicate minimum values"
"0","  min_indices <- which(outputs == min_val)"
"0","  num_min_indices <- length(min_indices)"
"0","  if (num_min_indices > 1) {"
"0","    # if there are multiple min values, choose the first one"
"0","    min_index <- inputs[min_indices[1], ]"
"0","  } else {"
"0","    # If there is only one unique minimum value, directly extract its index "
"0","    min_index <- inputs[min_indices, ]"
"0","  }"
"0","  "
"0","  result$index <- min_index"
"0","  result$val <- min_val"
"0","  "
"0","  # return result"
"0","  result"
"0","}"
