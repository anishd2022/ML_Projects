"0","aem <- function(g, n, N, LB = -1, UB = 1, method = ""deterministic"", min = TRUE) {"
"0","  # start timer:"
"0","  start_time <- Sys.time()"
"0","  "
"0","  # validate inputs"
"0","  if (n < 1) {"
"0","    stop(""n must be an integer greater than or equal to 1"")"
"0","  }"
"0","  "
"0","  # if inputs are valid, create initial list object"
"0","  result <- list(index = c(), val = c(), eval_matrix = c(), time = c())"
"0","  "
"0","  if (method == ""deterministic"") {"
"0","    # create a set of sampling points distributed evenly in a grid-like fashion"
"0","    points_vector <- seq(LB, UB, length = N)"
"0","    # get all combinations of those points for n dimensions"
"0","    sample_points <- expand.grid(replicate(n, points_vector, simplify = FALSE))"
"0","    if (n == 1) {"
"0","      sample_points <- seq(LB, UB, length = N)"
"0","    }"
"0","  }"
"0","  "
"0","  if (method == ""stochastic"") {"
"0","    # create a set of sampling points randomly uniformly distributed"
"0","    vectors <- lapply(1:n, function(i) runif(N, min = LB, max = UB))"
"0","    sample_points <- expand.grid(vectors)"
"0","    if (n == 1) {"
"0","      sample_points <- runif(N, min = LB, max = UB)"
"0","    }"
"0","  }"
"0","  "
"0","  "
"0","  # evaluate all combinations of those sample points:"
"0","  if (n > 1) {"
"0","    evaluated_points <- apply(sample_points, 1, function(vec) f(vec))"
"0","  }"
"0","  if (n == 1) {"
"0","    evaluated_points <- sapply(sample_points, g)"
"0","  }"
"0","  "
"0","  # create an eval_matrix:"
"0","  eval_matrix <- as.matrix(cbind(sample_points, evaluated_points))"
"0","  "
"0","  # minimize the function"
"0","  if (min == TRUE) {"
"0","    minimum <- min(evaluated_points)"
"0","    # add ""val"" to the result"
"0","    result$val <- minimum"
"0","    # find arg min:"
"0","    if (n > 1) {"
"0","      argmin <- as.vector(sample_points[which(evaluated_points == minimum), ])"
"0","    # add arg min to result:"
"0","    result$index <- argmin[1, ]"
"0","    }"
"0","    if (n == 1) {"
"0","      argmin <- as.vector(sample_points[which(evaluated_points == minimum)])"
"0","      result$index <- argmin[1]"
"0","    }"
"0","  }"
"0","  # maximize the function"
"0","  if (min == FALSE) {"
"0","    maximum <- max(evaluated_points)"
"0","    # add ""val to the result"
"0","    result$val <- maximum"
"0","    # find arg max:"
"0","    if (n > 1) {"
"0","      argmax <- as.vector(sample_points[which(evaluated_points == maximum), ])"
"0","      # add arg max to result:"
"0","      result$index <- argmax[1, ]"
"0","    }"
"0","    if (n == 1) {"
"0","      argmax <- as.vector(sample_points[which(evaluated_points == maximum)])"
"0","      result$index <- argmax[1]"
"0","    }"
"0","  }"
"0","  "
"0","  # end timer:"
"0","  end_time <- Sys.time()"
"0","  time_elapsed <- end_time - start_time"
"0","  # add time to result"
"0","  result$time <- as.numeric(time_elapsed)"
"0","  # add eval matrix to result"
"0","  result$eval_matrix <- eval_matrix"
"0","  "
"0","  # return the result"
"0","  result"
"0","}"
