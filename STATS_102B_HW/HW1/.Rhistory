if (n == 1) {
sample_points <- runif(N, min = LB, max = UB)
}
}
# evaluate all combinations of those sample points:
if (n > 1) {
evaluated_points <- apply(sample_points, 1, function(vec) f(vec))
}
if (n == 1) {
evaluated_points <- sapply(sample_points, g)
}
# create an eval_matrix:
eval_matrix <- as.matrix(cbind(sample_points, evaluated_points))
print(eval_matrix)
# minimize the function
if (min == TRUE) {
minimum <- min(evaluated_points)
# add "val" to the result
result$val <- minimum
# find arg min:
if (n > 1) {
argmin <- as.vector(sample_points[which(evaluated_points == minimum), ])
# add arg min to result:
result$index <- argmin[1, ]
}
if (n == 1) {
argmin <- as.vector(sample_points[which(evaluated_points == minimum)])
result$index <- argmin[1]
}
}
# maximize the function
if (min == FALSE) {
maximum <- max(evaluated_points)
# add "val to the result
result$val <- maximum
# find arg max:
if (n > 1) {
argmax <- as.vector(sample_points[which(evaluated_points == maximum), ])
# add arg max to result:
result$index <- argmax[1, ]
}
if (n == 1) {
argmax <- as.vector(sample_points[which(evaluated_points == maximum)])
result$index <- argmax[1]
}
}
# end timer:
end_time <- Sys.time()
time_elapsed <- end_time - start_time
# add time to result
result$time <- as.numeric(time_elapsed)
# add eval matrix to result
result$eval_matrix <- eval_matrix
# return the result
result
}
aem <- function(g, n, N, LB = -1, UB = 1, method = "deterministic", min = TRUE) {
# start timer:
start_time <- Sys.time()
# validate inputs
if (n < 1) {
stop("n must be an integer greater than or equal to 1")
}
# if inputs are valid, create initial list object
result <- list(index = c(), val = c(), eval_matrix = c(), time = c())
if (method == "deterministic") {
# create a set of sampling points distributed evenly in a grid-like fashion
points_vector <- seq(LB, UB, length = N)
# get all combinations of those points for n dimensions
sample_points <- expand.grid(replicate(n, points_vector, simplify = FALSE))
if (n == 1) {
sample_points <- seq(LB, UB, length = N)
}
}
if (method == "stochastic") {
# create a set of sampling points randomly uniformly distributed
vectors <- lapply(1:n, function(i) runif(N, min = LB, max = UB))
sample_points <- expand.grid(vectors)
if (n == 1) {
sample_points <- runif(N, min = LB, max = UB)
}
}
# evaluate all combinations of those sample points:
if (n > 1) {
evaluated_points <- apply(sample_points, 1, function(vec) f(vec))
}
if (n == 1) {
evaluated_points <- sapply(sample_points, g)
}
# create an eval_matrix:
eval_matrix <- as.matrix(cbind(sample_points, evaluated_points))
# minimize the function
if (min == TRUE) {
minimum <- min(evaluated_points)
# add "val" to the result
result$val <- minimum
# find arg min:
if (n > 1) {
argmin <- as.vector(sample_points[which(evaluated_points == minimum), ])
# add arg min to result:
result$index <- argmin[1, ]
}
if (n == 1) {
argmin <- as.vector(sample_points[which(evaluated_points == minimum)])
result$index <- argmin[1]
}
}
# maximize the function
if (min == FALSE) {
maximum <- max(evaluated_points)
# add "val to the result
result$val <- maximum
# find arg max:
if (n > 1) {
argmax <- as.vector(sample_points[which(evaluated_points == maximum), ])
# add arg max to result:
result$index <- argmax[1, ]
}
if (n == 1) {
argmax <- as.vector(sample_points[which(evaluated_points == maximum)])
result$index <- argmax[1]
}
}
# end timer:
end_time <- Sys.time()
time_elapsed <- end_time - start_time
# add time to result
result$time <- as.numeric(time_elapsed)
# add eval matrix to result
result$eval_matrix <- eval_matrix
# return the result
result
}
k <- function(v) {
sum(v^2)
}
times <- c()
dim <- c(1:4)
for (n in 1:4) {
result <- aem(k, n, N = 30, LB = -1, UB = 1, method = "stochastic")
time <- result$time
times <- append(times, time)
}
times_table <- data.frame(time = times,
dimension = dim)
times_table
#including necessary libraries
library(tidyverse)
library(ggplot2)
#including necessary libraries
library(tidyverse)
library(ggplot2)
k <- function(v) {
sum(v^2)
}
times <- c()
dim <- c(1:4)
for (n in 1:4) {
result <- aem(k, n, N = 30, LB = -1, UB = 1, method = "stochastic")
time <- result$time
times <- append(times, time)
}
times_table <- data.frame(time = times,
dimension = dim)
ggplot(data = times_table, aes(x = dimension, y = time)) +
geom_point() + geom_line()
k <- function(v) {
sum(v^2)
}
times <- c()
dim <- c(1:4)
for (n in 1:4) {
result <- aem(k, n, N = 30, LB = -1, UB = 1, method = "stochastic")
time <- result$time
times <- append(times, time)
}
times_table <- data.frame(time = times,
dimension = dim)
ggplot(data = times_table, aes(x = dimension, y = time)) +
geom_point(color = "blue") + geom_line(color = "red")
k <- function(v) {
sum(v^2)
}
times <- c()
dim <- c(1:4)
for (n in 1:4) {
result <- aem(k, n, N = 30, LB = -1, UB = 1, method = "stochastic")
time <- result$time
times <- append(times, time)
}
times_table <- data.frame(time = times,
dimension = dim)
ggplot(data = times_table, aes(x = dimension, y = time)) +
geom_point(color = "blue") + geom_line(color = "red") +
ylab("time (seconds)")
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
MLE <- 1 / x_bar
MLE
loglikelihood <- function(lambda) {
(N * log(lambda)) - (lambda * sum(x))
}
aem(loglikelihood, n = 1, LB = 0, UB = 5, N = 1000)
loglikelihood <- function(lambda) {
(log(lambda)) - (lambda * sum(x))
}
aem(loglikelihood, n = 1, LB = 0, UB = 5, N = 1000)
# attempts to minimize any one variable function
zom <- function(g, alpha, w0, K) {
# create empty result list:
result <- list(index = c(), val = c())
# define variables
curr_iter <- 0
curr_point <- w0
while (curr_iter < K) {
# current point's evaluation:
curr_eval <- g(curr_point)
# points to evaluate the function g at:
sample_points <- c(curr_point + alpha, curr_point - alpha)
# points evaluated
evaluated_points <- sapply(sample_points, g)
# increment curr_iter:
curr_iter <- curr_iter + 1
}
# set the "index" to be the current point:
result$index <- curr_point
# set the "val" to be the function evaluated at the current point:
result$val <- g(curr_point)
# output the result
result
}
# attempts to minimize any one variable function
zom <- function(g, alpha, w0, K) {
# create empty result list:
result <- list(index = c(), val = c())
# define variables
curr_iter <- 0
curr_point <- w0
while (curr_iter < K) {
# current point's evaluation:
curr_eval <- g(curr_point)
# points to evaluate the function g at:
sample_points <- c(curr_point + alpha, curr_point - alpha)
# points evaluated
evaluated_points <- sapply(sample_points, g)
# find the difference between the old and new evaluation:
diff_1 <- evaluated_points[1] - curr_eval
diff_2 <- evaluated_points[2] - curr_eval
# pick the best new point:
if (diff_1 <= diff_2) {
curr_point <- sample_points[1]
} else {
curr_point <- sample_points[2]
}
# increment curr_iter:
curr_iter <- curr_iter + 1
}
# set the "index" to be the current point:
result$index <- curr_point
# set the "val" to be the function evaluated at the current point:
result$val <- g(curr_point)
# output the result
result
}
f <- function(w) {
(sin(3*w)) + (0.3*(w^2))
}
zom(f, alpha = 0.1, w0 = 4.5, K = 10)
f <- function(w) {
(sin(3*w)) + (0.3*(w^2))
}
zom(f, alpha = 0.1, w0 = 4.5, K = 10)
zom(f, alpha = 0.1, w0 = -1.5, K = 10)
aem <- function(g, n, N, LB = -1, UB = 1, method = "deterministic", min = TRUE) {
# start timer:
start_time <- Sys.time()
# validate inputs
if (n < 1) {
stop("n must be an integer greater than or equal to 1")
}
# if inputs are valid, create initial list object
result <- list(index = c(), val = c(), eval_matrix = c(), time = c())
if (method == "deterministic") {
# create a set of sampling points distributed evenly in a grid-like fashion
points_vector <- seq(LB, UB, length = N)
# get all combinations of those points for n dimensions
sample_points <- expand.grid(replicate(n, points_vector, simplify = FALSE))
if (n == 1) {
sample_points <- seq(LB, UB, length = N)
}
}
if (method == "stochastic") {
# create a set of sampling points randomly uniformly distributed
vectors <- lapply(1:n, function(i) runif(N, min = LB, max = UB))
sample_points <- expand.grid(vectors)
if (n == 1) {
sample_points <- runif(N, min = LB, max = UB)
}
}
# evaluate all combinations of those sample points:
if (n > 1) {
evaluated_points <- apply(sample_points, 1, function(vec) f(vec))
}
if (n == 1) {
evaluated_points <- sapply(sample_points, g)
}
# create an eval_matrix:
eval_matrix <- as.matrix(cbind(sample_points, evaluated_points))
# minimize the function
if (min == TRUE) {
minimum <- min(evaluated_points)
# add "val" to the result
result$val <- minimum
# find arg min:
if (n > 1) {
argmin <- as.vector(sample_points[which(evaluated_points == minimum), ])
# add arg min to result:
result$index <- argmin[1, ]
}
if (n == 1) {
argmin <- as.vector(sample_points[which(evaluated_points == minimum)])
result$index <- argmin[1]
}
}
# maximize the function
if (min == FALSE) {
maximum <- max(evaluated_points)
# add "val to the result
result$val <- maximum
# find arg max:
if (n > 1) {
argmax <- as.vector(sample_points[which(evaluated_points == maximum), ])
# add arg max to result:
result$index <- argmax[1, ]
}
if (n == 1) {
argmax <- as.vector(sample_points[which(evaluated_points == maximum)])
result$index <- argmax[1]
}
}
# end timer:
end_time <- Sys.time()
time_elapsed <- end_time - start_time
# add time to result
result$time <- as.numeric(time_elapsed)
# add eval matrix to result
result$eval_matrix <- eval_matrix
# return the result
result
}
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
MLE <- 1 / x_bar
MLE
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda) - lambda * n * x_bar
}
aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic")
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda, base = e) - lambda * n * x_bar
}
aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic")
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda) - lambda * n * x_bar
}
aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic")
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda) - lambda * n * x_bar
}
aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic")
View(aem)
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda) - lambda * n * x_bar
}
aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic", min = FALSE)
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda) - lambda * n * x_bar
}
result <- aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic", min = FALSE)
result$index
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda) - lambda * n * x_bar
}
result <- aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic", min = FALSE)
result$index
set.seed(1234)
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
n * log(lambda) - lambda * n * x_bar
}
result <- aem(g, n = 1, N = 1000, LB = 0, UB = 5, method = "stochastic", min = FALSE)
result$index
3.890708 - 3.889537
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
-(n * log(lambda) - lambda * n * x_bar)
}
zom(g, alpha = 0.01, w0 = 1, K = 1000)
obs <- c(0.368, 0.714, 0.126, 0.006, 0.525, 0.36, 0.095, 0.212, 0.107, 0.058)
x_bar <- mean(obs)
n <- length(obs)
g <- function(lambda) {
-(n * log(lambda) - lambda * n * x_bar)
}
result <- zom(g, alpha = 0.01, w0 = 1, K = 1000)
result$index
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values)
# Apply your function to each combination of parameters
results <- mapply(zom, parameter_combinations$alpha, parameter_combinations$K)
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values, w0 = 1)
# Apply your function to each combination of parameters
results <- mapply(zom, parameter_combinations$alpha, parameter_combinations$K)
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values, w0 = 1)
# Apply your function to each combination of parameters
results <- mapply(zom, parameter_combinations$alpha,
parameter_combinations$w0,
parameter_combinations$K)
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values, w0 = 1)
# Apply your function to each combination of parameters
results <- mapply(zom, zom, parameter_combinations$alpha,
parameter_combinations$w0,
parameter_combinations$K)
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values, w0 = 1)
# Apply your function to each combination of parameters
results <- mapply(zom, parameter_combinations$alpha,
parameter_combinations$w0,
parameter_combinations$K)
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values, w0 = 1)
# Replicate each value of K the appropriate number of times
K_values_rep <- rep(K_values, each = length(alpha_values))
# Apply your function to each combination of parameters
results <- mapply(zom, g = list(g), alpha = parameter_combinations$alpha,
w0 = parameter_combinations$w0, K = K_values_rep)
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values, w0 = 1)
# Replicate each value of K the appropriate number of times
K_values_rep <- rep(K_values, each = length(alpha_values))
# Apply your function to each combination of parameters
results <- mapply(zom, g = list(g), alpha = parameter_combinations$alpha,
w0 = parameter_combinations$w0, K = K_values_rep)
results
# parameter values
alpha_values <- c(1, 0.1, 0.01, 0.001)
K_values <- c(10, 100, 1000, 10000)
# Generate all combinations of parameter values
parameter_combinations <- expand.grid(alpha = alpha_values, K = K_values, w0 = 1)
# Replicate each value of K the appropriate number of times
K_values_rep <- rep(K_values, each = length(alpha_values))
# Apply your function to each combination of parameters
results <- mapply(zom, g = list(g), alpha = parameter_combinations$alpha,
w0 = parameter_combinations$w0, K = K_values_rep, SIMPLIFY = FALSE)
# Create a data frame to store the results
results_df <- data.frame(
alpha = parameter_combinations$alpha,
K = K_values_rep,
index = sapply(results, function(x) x$index),
val = sapply(results, function(x) x$val)
)
# Print the results data frame
print(results_df)
