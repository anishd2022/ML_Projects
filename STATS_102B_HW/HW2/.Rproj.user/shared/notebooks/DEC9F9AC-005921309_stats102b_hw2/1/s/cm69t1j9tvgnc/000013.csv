"0","# implementing momentum based gradient descent (beta = decay rate):"
"0","grad_desc_mom <- function(g, h, alpha, w0, K, beta) {"
"0","  # create initial list object"
"0","  result <- list(index = c(), val = c())"
"0","  "
"0","  # set initial point:"
"0","  curr_point <- w0"
"0","  # create initial empty coordinate matrix (ncol = n+1)"
"0","  mat <- matrix(nrow = K, ncol = length(w0) + 1)"
"0","  "
"0","  # create gradient approximation function:"
"0","  grad_g <- function(x) {"
"0","    result_vec <- c()"
"0","    for (i in 1:length(x)) {"
"0","      current_result <- (g(x + h) - g(x - h)) / (2*h)"
"0","      result_vec <- append(result_vec, current_result)"
"0","    }"
"0","    result_vec"
"0","  }"
"0","  "
"0","  # iterate for K iterations..."
"0","  for (i in 1:K) {"
"0","    # calculate gradient at current step"
"0","    grad_curr <- grad_g(curr_point)"
"0","    # update descent direction using momentum term"
"0","    if (i == 1) {"
"0","      d <- -grad_curr"
"0","    } else {"
"0","      d <- beta * d + (1 - beta) * (-grad_curr)"
"0","    }"
"0","    # update the current point"
"0","    curr_point <- curr_point + alpha * d"
"0","    mat[i, 1:length(w0)] <- curr_point"
"0","    mat[i, length(w0) + 1] <- g(curr_point)"
"0","  }"
"0","  "
"0","  min_index <- which.min(mat[, length(w0) + 1])"
"0","  if (length(min_index > 1)) {"
"0","    min_index <- min_index[1]"
"0","  }"
"0","  min_input <- mat[min_index, 1:length(w0)]"
"0","  min_output <- mat[min_index, length(w0) + 1]"
"0","  "
"0","  result$index <- min_input"
"0","  result$val <- min_output"
"0","  "
"0","  # return result:"
"0","  result"
"0","}"
"0",""
"0","# looking at how results change with different beta values:"
"0","# Define the parameter values"
"0","h <- 0.0001"
"0","alpha <- 0.01"
"0","w0 <- c(1.5, 1)"
"0","K <- 50"
"0","beta_values <- c(0.1, 0.3, 0.5, 0.7, 0.9, 0.99)"
"0","# Initialize an empty list to store the results"
"0","results <- list()"
"0","# Iterate over each value of beta and call grad_desc_mom function"
"0","for (beta in beta_values) {"
"0","  result <- grad_desc_mom(l, h, alpha, w0, K, beta)"
"0","  results[[as.character(beta)]] <- result"
"0","}"
"0","# Print the results"
"0","options(digits = 10)"
"0","results"
"1","$`0.1`
"
"1","$`0.1`$index
"
"1","[1]"
"1"," 1.75887892"
"1"," 1.25887892"
"1","
"
"1","
"
"1","$`0.1`$val
"
"1","[1]"
"1"," 95.57000536"
"1","
"
"1","
"
"1","
"
"1","$`0.3`
"
"1","$`0.3`$index
"
"1","[1]"
"1"," 1.758878936"
"1"," 1.258878936"
"1","
"
"1","
"
"1","$`0.3`$val
"
"1","[1]"
"1"," 95.57000536"
"1","
"
"1","
"
"1","
"
"1","$`0.5`
"
"1","$`0.5`$index
"
"1","[1]"
"1"," 1.758878931"
"1"," 1.258878931"
"1","
"
"1","
"
"1","$`0.5`$val
"
"1","[1]"
"1"," 95.57000536"
"1","
"
"1","
"
"1","
"
"1","$`0.7`
"
"1","$`0.7`$index
"
"1","[1]"
"1"," 1.75888532"
"1"," 1.25888532"
"1","
"
"1","
"
"1","$`0.7`$val
"
"1","[1]"
"1"," 95.57000536"
"1","
"
"1","
"
"1","
"
"1","$`0.9`
"
"1","$`0.9`$index
"
"1","[1]"
"1"," 1.758490778"
"1"," 1.258490778"
"1","
"
"1","
"
"1","$`0.9`$val
"
"1","[1]"
"1"," 95.57000858"
"1","
"
"1","
"
"1","
"
"1","$`0.99`
"
"1","$`0.99`$index
"
"1","[1]"
"1"," 1.763193998"
"1"," 1.263193998"
"1","
"
"1","
"
"1","$`0.99`$val
"
"1","[1]"
"1"," 95.57040277"
"1","
"
"1","
"
"1","
"
