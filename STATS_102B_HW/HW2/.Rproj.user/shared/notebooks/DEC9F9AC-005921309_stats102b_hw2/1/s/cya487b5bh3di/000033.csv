"0","# g is a function: R^n -> R"
"0","# grad_g is the gradient of g: \del g: R^n -> R^n"
"0","# alpha is the step size"
"0","# w0 is the initial point"
"0","# K is the number of iterations"
"0","grad_desc_n <- function(g, grad_g, alpha, w0, K) {"
"0","  # create initial list object"
"0","  result <- list(index = c(), val = c())"
"0","  "
"0","  # set initial point:"
"0","  curr_point <- w0"
"0","  # create initial empty coordinate matrix (ncol = n+1)"
"0","  mat <- matrix(nrow = K, ncol = length(w0) + 1)"
"0","  "
"0","  # iterate for K iterations..."
"0","  for (i in 1:K) {"
"0","    # calculate gradient at current step"
"0","    grad_curr <- grad_g(curr_point)"
"0","    # update... "
"0","    mat[i, 1:length(w0)] <- curr_point - alpha * grad_curr"
"0","    curr_point <- mat[i, 1:length(w0)]"
"0","  }"
"0","  "
"0","  # fill out the last column of the matrix:"
"0","  mat[, length(w0) + 1] <- apply(mat[, 1:length(w0)], 1, function(row) g(row))"
"0","  "
"0","  inputs <- mat[, 1:length(w0)]"
"0","  outputs <- mat[, length(w0) + 1]"
"0","  min_val <- min(outputs)"
"0","  min_index <- inputs[which(outputs == min_val), ]"
"0","  "
"0","  result$index <- min_index"
"0","  result$val <- min_val"
"0","  "
"0","  # return the result object:"
"0","  result"
"0","}"
