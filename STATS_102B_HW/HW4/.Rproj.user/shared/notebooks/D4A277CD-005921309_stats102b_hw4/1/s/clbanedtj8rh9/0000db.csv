"0","# implement K-fold cross validation (K = 10)"
"0","# first create MAE loss function:"
"0","calculate_MAE <- function(actual, predicted) {"
"0","  mean(abs(actual - predicted))"
"0","}"
"0",""
"0","# create function for K-fold cross validation:"
"0","k_fold_cv <- function(model_formula, data, K = 10) {"
"0","  # find number of observations"
"0","  n <- nrow(data)"
"0","  # randomly shuffle the indices:"
"0","  indices <- sample(1:n)"
"0","  # set each testing set to have n/K data points"
"0","  fold_size <- ceiling(n / K)"
"0","  # set an empty vector of length K to be filled with MAE values for later:"
"0","  MAE_values <- numeric(K)"
"0","  "
"0","  # for each fold:"
"0","  for (i in 1:K) {"
"0","    start_index <- (i - 1) * fold_size + 1"
"0","    end_index <- min(i * fold_size, n)"
"0","    test_indices <- indices[start_index:end_index]"
"0","    # set the train indices to be everything except what you are testing on"
"0","    train_indices <- indices[-(start_index:end_index)]"
"0","    "
"0","    # train the model on the training set:"
"0","    model <- lm(model_formula, data = data[train_indices, ])"
"0","    # make predictions on the test set:"
"0","    newdata = data[test_indices, ]"
"0","    predicted <- predict(model, newdata)[test_indices]"
"0","    actual <- data$block[test_indices]"
"0","    "
"0","    # calculate MAE for this fold:"
"0","    MAE_values[i] <- calculate_MAE(actual, predicted)"
"0","  }"
"0","  # return the mean of all the MAE values:"
"0","  mean(MAE_values)"
"0","}"
"0",""
"0","# Perform K-fold cross-validation for each model"
"0","simple_lm_cv <- k_fold_cv(lm_formula, vball_data)"
"0","quad_model_cv <- k_fold_cv(quad_formula, vball_data)"
"0","cubic_model_cv <- k_fold_cv(cubic_formula, vball_data)"
"0","fteen_model_cv <- k_fold_cv(fteen_formula, vball_data)"
"0","exp_model_cv <- log(k_fold_cv(exp_formula, vball_data))"
"0",""
"0","# Print the results"
"0","print(paste(""Simple Linear Model CV MAE:"", simple_lm_cv))"
"1","[1]"
"1"," ""Simple Linear Model CV MAE: 6.93502349128999"""
"1","
"
"0","print(paste(""Quadratic Model CV MAE:"", quad_model_cv))"
"1","[1]"
"1"," ""Quadratic Model CV MAE: 7.05159575216316"""
"1","
"
"0","print(paste(""Cubic Model CV MAE:"", cubic_model_cv))"
"1","[1]"
"1"," ""Cubic Model CV MAE: 7.01147254641253"""
"1","
"
"0","print(paste(""Degree 14 Polynomial Model CV MAE:"", fteen_model_cv))"
"1","[1]"
"1"," ""Degree 14 Polynomial Model CV MAE: 6.46738022742396"""
"1","
"
"0","print(paste(""Exponential Model CV MAE:"", exp_model_cv))"
"1","[1]"
"1"," ""Exponential Model CV MAE: 5.60515029983775"""
"1","
"
