"0","# g is a function: R -> R"
"0","# w0 is the initial point"
"0","# d is a step size in each direction"
"0","# K is the number of iterations"
"0","coord_desc <- function(g, w0, d, K) {"
"0","  # create initial list object:"
"0","  result <- list(index = c(), val = c())"
"0","  "
"0","  # create initial empty coordinate matrix: (ncol = n + 1)"
"0","  mat <- matrix(nrow = K, ncol = length(w0) + 1)"
"0","  "
"0","  # set initial point:"
"0","  curr_point <- w0"
"0","  "
"0","  # iterate for K iterations:"
"0","  for (i in 1:K) {"
"0","    # create n x n identity matrix for standard basis vectors:"
"0","    basis_mat <- diag(length(w0))"
"0","    # create all candidate directions:"
"0","    basis_vectors <- as.list(as.data.frame(t(basis_mat)))"
"0","    negative_basis_vectors <- lapply(basis_vectors, function(v) -v)"
"0","    candidate_directions <- c(basis_vectors, negative_basis_vectors)"
"0","    "
"0","    # find 2n candidate points"
"0","    new_points <- lapply(candidate_directions, function(direction) curr_point + d * direction)"
"0","    new_points <- do.call(rbind, lapply(new_points, as.vector))"
"0","    evaluated_pts <- apply(new_points, 1, g)  # Evaluate all points"
"0","    "
"0","    # find the index of the minimum evaluated point"
"0","    min_index <- which.min(evaluated_pts)"
"0","    min_point <- as.numeric(new_points[min_index, ])"
"0","    "
"0","    # add results to matrix:"
"0","    mat[i, 1:length(w0)] <- min_point"
"0","    mat[i, length(w0) + 1] <- evaluated_pts[min_index]"
"0","    "
"0","    # update current point"
"0","    curr_point <- min_point"
"0","  }"
"0","  "
"0","  inputs <- mat[, 1:length(w0)]"
"0","  outputs <- mat[, length(w0) + 1]"
"0","  min_val <- min(outputs)"
"0","  # check if there are duplicate minimum values"
"0","  min_indices <- which(outputs == min_val)"
"0","  num_min_indices <- length(min_indices)"
"0","  if (num_min_indices > 1) {"
"0","    # if there are multiple min values, choose the first one"
"0","    min_index <- inputs[min_indices[1], ]"
"0","  } else {"
"0","    # If there is only one unique minimum value, directly extract its index"
"0","    min_index <- inputs[min_indices, ]"
"0","  }"
"0","  "
"0","  result$index <- min_index"
"0","  result$val <- min_val"
"0","  "
"0","  # return result"
"0","  result"
"0","}"
