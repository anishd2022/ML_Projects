"0","# standardize attack and defense columns"
"0","pokemon_data <- pokemon_data %>%"
"0","  mutate(attack_std = scale(attack),"
"0","         defense_std = scale(defense))"
"0","# extract appropriate columns"
"0","data_std <- pokemon_data %>%"
"0","  select(c(attack_std, defense_std))"
"0","# compute covariance matrix"
"0","cov_matrix <- cov(data_std)"
"0","# get eigenvalues and eigenvectors"
"0","eigen_result <- eigen(cov_matrix)"
"0","eigenvalues <- eigen_result$values"
"0","eigenvectors <- eigen_result$vectors"
"0","# project data onto eigenvectors to obtain principal components"
"0","principal_components <- as.matrix(data_std) %*% eigenvectors"
"0","# data frame for plot..."
"0","data_std_df <- as.data.frame(data_std)"
"0","colnames(data_std_df) <- c(""attack"", ""defense"")"
"0","principal_components_df <- as.data.frame(principal_components)"
"0","colnames(principal_components_df) <- c(""PC1"", ""PC2"")"
"0",""
"0","# plot in original axes:"
"0","ggplot(data_std_df, aes(x = attack, y = defense)) +"
"0","  geom_point(color = 'orange', alpha = 0.4) +"
"0","  geom_segment(aes(x = 0, y = 0, xend = eigenvectors[1,1], yend = eigenvectors[2,1]), "
"0","               arrow = arrow(length = unit(0.3, ""cm"")), color = ""red"") +"
"0","  geom_segment(aes(x = 0, y = 0, xend = eigenvectors[1,2], yend = eigenvectors[2,2]), "
"0","               arrow = arrow(length = unit(0.3, ""cm"")), color = ""blue"") +"
"0","  ggtitle(""PokÃ©mon Data in Original Axes with Loadings"") +"
"0","  xlab(""Standardized Attack"") + ylab(""Standardized Defense"")"
